// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// JobRunSpec defines the desired state of JobRun.
//
// This entity describes a job run. A job run is a unit of work, such as a Spark
// jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on
// EKS.
type JobRunSpec struct {
	// The execution role ARN for the job run.
	// +kubebuilder:validation:Required
	ExecutionRoleARN *string `json:"executionRoleARN"`
	// The job driver for the job run.
	// +kubebuilder:validation:Required
	JobDriver *JobDriver `json:"jobDriver"`
	// The name of the job run.
	Name *string `json:"name,omitempty"`
	// The Amazon EMR release version to use for the job run.
	// +kubebuilder:validation:Required
	ReleaseLabel *string `json:"releaseLabel"`
	// The tags assigned to job runs.
	Tags map[string]*string `json:"tags,omitempty"`
	// The virtual cluster ID for which the job run request is submitted.
	// +kubebuilder:validation:Required
	VirtualClusterID *string `json:"virtualClusterID"`
}

// JobRunStatus defines the observed state of JobRun
type JobRunStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// This output displays the started job run ID.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty"`
}

// JobRun is the Schema for the JobRuns API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type JobRun struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobRunSpec   `json:"spec,omitempty"`
	Status            JobRunStatus `json:"status,omitempty"`
}

// JobRunList contains a list of JobRun
// +kubebuilder:object:root=true
type JobRunList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []JobRun `json:"items"`
}

func init() {
	SchemeBuilder.Register(&JobRun{}, &JobRunList{})
}
